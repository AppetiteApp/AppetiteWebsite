<table>
    <thead>{{user.firstName}}</thead>
    <tr>
        <th>First Name:</th>
        <td>{{user.firstName}}</td>
    </tr>
    <tr>
        <th>Last Name:</th>
        <td>{{user.lastName}}</td>
    </tr>
    <tr>
        <th>Email:</th>
        <td>{{user.email}}</td>
    </tr>
    <tr>
        <th>Meals Made</th>
    </tr>
    <tr ng-repeat="meal in user.mealsMade">
        <td></td>
        <td>{{meal.dishName}}</td>
        <td>{{meal.description}}</td>
        
    </tr>
    

        

    
</table>
<hr>
<h3>Cheryl's notes to Paul: this is what I envisioned (and assumed you did) with this page</h3>
<p>The User's info is loaded and display. If you click on the 'inputs', you can modify them; once you do, the button below shows up to submit the form to edit the user's info. Will be working on the $scope.edit(user) function in the next hour.</p>
<form ng-submit="editProfile(user)">
  <label for="firstName">First Name</label><input type='text' ng-model="user.firstName" name="firstName" ng-class="{focus: focus, blur: blur}" ng-focus="focus=true;blur=false" ng-blur="focus=false;blur=true" ng-init="focus=false;blur=true" ng-change="changed=true"/><br>
  <label for="lastName">Last Name</label><input type='text' ng-model="user.lastName" name="lastName" ng-class="{focus: focus, blur: blur}" ng-focus="focus=true;blur=false" ng-blur="focus=false;blur=true" ng-init="focus=false;blur=true" ng-change="changed=true"/><br>
  <label for="phone">Phone</label><input type='text' ng-model="user.phone" name="phone" ng-class="{focus: focus, blur: blur}" ng-focus="focus=true;blur=false" ng-blur="focus=false;blur=true" ng-init="focus=false;blur=true" ng-change="changed=true"/><br>
  <label for="firstName">Address</label><input type='text' ng-model="user.address" name="adress" ng-class="{focus: focus, blur: blur}" ng-focus="focus=true;blur=false" ng-blur="focus=false;blur=true" ng-init="focus=false;blur=true" ng-change="changed=true"/><br>
  <input type="submit" value="Save Edits" ng-show="changed" ng-init="changed=false"/>
</form>

<br>

    <h3>Cheryl's running tests on updating stuff and location stuff...not really in the next couple hours</h3>
    <form ng-click="changeProfile(details)">
        <input type="text" ng-model="details.address"/>
        <input type="submit" value="Update" />
        
    </form>
    
    
    <div id="locationField">
      <input id="autocomplete" placeholder="Enter your address"
             onFocus="geolocate()" type="text"></input>
    </div>

    <table id="address">
      <tr>
        <td class="label">Street address</td>
        <td class="slimField"><input class="field" id="street_number"
              disabled="true"></input></td>
        <td class="wideField" colspan="2"><input class="field" id="route"
              disabled="true"></input></td>
      </tr>
      <tr>
        <td class="label">City</td>
        <td class="wideField" colspan="3"><input class="field" id="locality"
              disabled="true"></input></td>
      </tr>
      <tr>
        <td class="label">State</td>
        <td class="slimField"><input class="field"
              id="administrative_area_level_1" disabled="true"></input></td>
        <td class="label">Zip code</td>
        <td class="wideField"><input class="field" id="postal_code"
              disabled="true"></input></td>
      </tr>
      <tr>
        <td class="label">Country</td>
        <td class="wideField" colspan="3"><input class="field"
              id="country" disabled="true"></input></td>
      </tr>
    </table>
    
    
    
    
    <style>
      input.blur{
        border-width: 0px;
        border-left: 1px solid #ccc;
      }
      label {
        display: inline-block;
        width: 100px;
      }
      
      
    </style>
    
    
    <!--<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCYuMVPGLB6a4BmDmUH8yAH61mbXiIjIsc&libraries=places"></script>-->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCYuMVPGLB6a4BmDmUH8yAH61mbXiIjIsc&libraries=places&callback=initAutocomplete"
        async defer></script>

    <script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            console.log(geolocation);
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>

    
    
    
