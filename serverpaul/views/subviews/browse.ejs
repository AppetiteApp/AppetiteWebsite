<!-- The Modal -->


<div id="itemscontainer">
    <div id="submitsuccess" ng-cloak>{{message}}</div>
  <div id="innercontainer" ng-init="selection = { selectedNode:  null }">
  <div ng-repeat="dish in dishes" id="repeateditem" ng-id="{{dish.key}}" ng-cloak>

        <div id="dishbanner" ng-class="{'expandcollapse-heading-collapsed': active, 'expandcollapse-heading-expanded': !active}" ng-click="dish.active = !dish.active" >
          
            <div id="dishprice">${{dish.price}}</div>

            <!-- Trigger/Open The Modal -->
            <button ng-click="openModal(dish)" class="order" ng-if="dish.status">{{dish.status}}</button>

            <div ng-class="{'modal4': selection.selectedNode !== dish, 'modal4select': selection.selectedNode == dish}">

              <!-- Modal content -->
              <div class="modal-content4">
                <span class="close4" ng-click="selection.selectedNode = null">x</span>

                  {{dish.popupMessage}}<br>
                  <div ng-repeat="purchase in dish.purchases track by $index" ng-if="dish.purchases && parentController.uid===dish.ownerid">
                      {{purchase.buyerName}} has ordered your dish!<br>
                  </div>
                  
                  <button ng-if="dish.status==='manage'">See more</button>  
                  <button ng-click="cancelOrder(dish)" ng-if="dish.status==='ordered'">Cancel Order</button>
                  <button class="orderconfirm" ng-click="order(dish)" ng-if="dish.status==='order'">Confirm</button>
                  <button class="ordercancel" ng-click="selection.selectedNode = null" ng-if="dish.status==='order'">Cancel</button>

              </div>

            </div>




          <div id="itembox">
            <div id="dishtitle">{{dish.dishName}}</div>
            <div class="chefname">by {{dish.ownerName}}</div></br>
            <div id="dishtime">Ready {{dish.time}}</div></br></br>
          </div>
        </div>

    <div class="slideDown" ng-hide="!dish.active" id="itemdetails">
        <div class="dishdescription">"{{dish.description}}"</div>
    </div>
  </div>
</div>
</div>

<div id="map">

</div>



<style>

    /*CHERYL'S STYLES*/
    .choices {
        border: 1px solid #333;
        background-color: #f0f0f0;
        margin: 5px 0;
    }
    .choices:hover {
        cursor: pointer;
    }

    .faded {
        font-weight: lighter;
        font-size: 0.7em;
    }




  button.accordion {
      background-color: #eee;
      color: #444;
      cursor: pointer;
      padding: 18px;
      width: 100%;
      border: none;
      text-align: left;
      outline: none;
      font-size: 15px;
      transition: 0.4s;
  }

  div.panel {
      display: none;
  }

  div.panel.show {
      display: block !important;
  }

/*CHERYL MADE THESE STYLES, FEEL FREE TO REMOVE*/

  .infoDiv h2 {
      font-weight: normal;
  }

  .infoDiv h2,
  .infoDiv p{
      margin: 3px;
  }

  span.right {
      display: inline-block;
      float: right;
  }

</style>


 <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBztxeNgL4baVisF6JB-3WgwNXFKJerUs8&callback=initMap"
async defer></script>


<script>
  var acc = document.getElementsByClassName("accordion");
  var i;

  for (i = 0; i < acc.length; i++) {
      acc[i].addEventListener('click', function() {
          this.classList.toggle("active");
          this.nextElementSibling.classList.toggle("show");
      }, false);
  }

  var map;

  function initMap() {
    var mapDiv = document.getElementById('map');

    map = new google.maps.Map(mapDiv, {
        center: new google.maps.LatLng(45.5116861, -73.5773356),
        zoom: 14,
        streetViewControl: false,
        mapTypeControl: false
    });

    var infoWindows = {};

    mapHelper(map, infoWindows);
    google.maps.event.trigger(map, 'resize');
    //resizeMap(map);




    //google.maps.event.trigger(map, 'resize');
    map.setZoom( map.getZoom() );

    //map.setCenter({lat: 45.5116861, lng: -73.5773356});

  }


    var mapHelper = function(map, infoWindows){
        var dishes = [];
        var markers = [];
        var currentUser = firebase.auth().currentUser;
        
        firebase.database().ref('dish/').on("value", function(snapshot){
            if (snapshot.val()){
                var timeNow = new Date();
                    snapshot.forEach(function(child) {
                    //console.log(child.val());
                    dishes.push(child.val());
                    
                    var childPickupTime = new Date(child.val().time.pickupTime);
                    var orderBy = new Date(child.val().orderBy);

                    if (!child.val().archived && childPickupTime.getTime() - 1000*60*60*3 >= timeNow.getTime()){
                        
                        if (currentUser && child.val().ownerid === currentUser.uid){
                            child.val().owner = "me";
                        }
                    
                        var infoContent = "<div class='infoDiv'><h2>" +
                                      child.val().dishName + "<span class='right'>$" + child.val().price.toString() + "</span></h2><h2><span class='faded'> by " +
                                      child.val().owner +
                                      "</span></h2><p>" +
                                      child.val().description +
                                      "</p><p>Order By" +
                                      makeTime(orderBy) +
                                  "</p><p>Available ~ " +
                                      makeTime(childPickupTime) +
                                      "</p></div>";

                        var infowindow = new google.maps.InfoWindow({
                            content: infoContent
                        });

    
                        var marker = new google.maps.Marker({
                            position: {
                                lat: child.val().lat,
                                lng: child.val().lng
                            },
                            title: child.val().dishName
                        });

                        //function for bouncing
                        function toggleBounce() {
                            if (marker.getAnimation() !== null) {
                                marker.setAnimation(null);
                            } else {
                                marker.setAnimation(google.maps.Animation.BOUNCE);
                            }
                        }

                        //simulate a click here, using 'selector' to select the element with ng-id
                        var selector = 'div[ng-id="' + child.key + '"]';
                        var modal4 = document.getElementById("dish-{{$index}}");
                        var span4 = document.getElementsByClassName("close4")[0];

                        $('body').on('click', selector, function () {
                            google.maps.event.trigger(marker, 'click', {});
                        });

                        $('body').on('mouseover', selector, function(){
                            marker.setAnimation(google.maps.Animation.BOUNCE);
                        });

                        $('body').on('mouseout', selector, function(){
                            marker.setAnimation(null);
                        });

                        marker.addListener('click', function() {
                            if (!infoWindows.selector){
                                infowindow.open(map, marker);
                                infoWindows.selector = true;
                            } else {
                                infowindow.close();
                                infoWindows.selector = false;
                            }
    

                        });

                        google.maps.event.addListener(map, 'click', function() {
	    			        infowindow.close();
    			        });


                        infoWindows.selector = false;
                        markers.push(marker);
                        //console.log(marker);

                    } //end if

                });

                markers.forEach(function(pin){
                    pin.setMap(map);
                });
            }
        });
    }; //end mapHelper function

    var makeTime = function(date) {
        var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jue", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

        var formatAPMP = function(date) {
            var hours = date.getHours();
            var minutes = date.getMinutes();
            var ampm = hours >= 12 ? 'pm' : 'am';
            hours = hours % 12;
            hours = hours ? hours : 12; // the hour '0' should be '12'
            minutes = minutes < 10 ? '0' + minutes : minutes;
            var strTime = hours + ':' + minutes + ampm;
            return strTime;
        };

        var formatDate = function(date){
            console.log("Got function to format date!");
            var todayDate = new Date();
            var testDate = new Date(date.toString());

            var timeString;
            if (testDate.setHours(0,0,0,0) == todayDate.setHours(0,0,0,0)){
                timeString = "today ";
            } else if(date.getFullYear() === todayDate.getFullYear()) {
                timeString = monthNames[date.getMonth()] + " " + date.getDate() + " ";
            } else {
                timeString = date.getFullYear() + ' ' + monthNames[date.getMonth()] + ' ' + date.getDate() + ' ';
            }
            console.log(timeString);
            return timeString;
        };

        return formatDate(date) + formatAPMP(date);

    };

</script>

<script>
function growDiv() {
    var growDiv = document.getElementById('grow');
    if (growDiv.clientHeight) {
      growDiv.style.height = 0;
    } else {

      growDiv.style.height = growDiv.scrollHeight + "px";
    }
document.getElementById("more-button").value=document.getElementById("more-button").value=='Read more'?'Learn More':'Read more';
}

</script>
