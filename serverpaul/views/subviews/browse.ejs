<%- include ../partials/navbar.ejs %>

<div id="itemscontainer">
  <div id="innercontainer">
  <div ng-repeat="dish in dishes" id="repeateditem">
      <div id="listitem" ng-click="showDetails = !showDetails">

        <div id="dishbanner">
          <div class="dishthumbnail">
            <img class="img-thumbnail" src="/imgs/gordon.jpg" />
          </div>

            <div id="dishtitle">{{dish.dishName}}</div>
            <div id="dishprice">${{dish.price}}</div>
        </div>
    </div>
    <div ng-show="showDetails" id="itemdetails">
        <p>{{dish.description}}</p>
        <div id="dishtime">{{dish.time}}</div>
        <div id="dishphone">{{dish.phone}}</div>
        <div id="dishlocation">{{dish.location}}</div>
    </div>
  </div>
</div>
</div>


<div class="morph-button morph-button-modal1 morph-button-modal-2 morph-button-fixed" id="submitdishbutton">
    <button type="button" id="browsebutton" ng-click="dish.submitSuccess=false">Sell Dish!</button>
    <div class="morph-content">
        <div class="content-style-form content-style-form-1">
            <span class="icon icon-close">Close the dialog</span>
            <h2>Sell a Dish</h2>
            {{message}}
            <div class="warning" ng-repeat="warning in dish.warnings">{{warning.warningMessage}}</div>
            <div class="warning" ng-repeat="error in dish.errors">{{error.errorMessage}}</div>
                <div id="submitleft">

                <div id="exampletitle">EXAMPLE</div>
                <div id="menuexample">
                    Home-made Spicy Stir Fry</br>
                    Traditional Chinese Stir Fry recipe passed down to me through my mom!  Cooked
                </div>
                <div id="logisticsexample"></br>

                </div>
                </div>

            <div id="fullformsubmit">
            <form>

              <div class="menusubmit">
                <div id="dishbox">

                  <label id="whatchamakin">What are you making?</label>
                  <input class="menutextbox" type="text" ng-model="dish.dishName" />
                </div>
                <div id="pricebox">
                  <label>Price</label>
                  <input class="menutextbox" id="pricetextbox" ng-model="dish.price" />
                </div>

                <div>
                  <label id="descriptionlabel">Description</label>
                  <textarea id="descriptiontextbox" ng-model="dish.description"></textarea>
                </div>
               </div>

               <div id="logisticssubmit">
                    <label id="whattime">Around what time?</label><br>
                    <label id="fromlabel">From:</label>
                    <input class="logistictextbox" id="submitdate" type="date" ng-model="dish.time.startTime" />
                    <input class="logistictextbox" type="time" ng-model="dish.time.startTime" step="600"/><br>
                    <label id="tolabel">To:</label>
                    <input class="logistictextbox" id="submitdate" type="date" ng-model="dish.time.endTime" />
                    <input class="logistictextbox" type="time" ng-model="dish.time.endTime" step="600"/
                </div>


                <div>
                  <label id="where">Where?</label> <label id="submitedit" for="c2" ng-click="dish.useLocationCustom=!dish.useLocationCustom" ng-init="dish.useLocationCustom=false"> </label>
                  <div id="defaultaddress" ng-hide="dish.useLocationCustom">{{dish.location.name}} </div>

                  <div ng-show="dish.useLocationCustom">{{dish.locationCustom.name}}</div>

                  <div id="searchdiv" ng-show="dish.useLocationCustom">
                  <input type="text" id="addresssearch" placeholder="Search for cusom location" ng-model="searchAddress" />
                  <button id="searchbutton" ng-click="submitAddress()">Search</button>

                    <div ng-repeat="result in results" class="choices" ng-click="assignLocation(result)">
                      <p>{{result.formatted_address}}</p>
                    </div>
                  </div>


                </div>
                    <button class="logistictextbox" type="submit"class="btn btn-default" ng-click="submitDish(dish)" ng-disabled="!dish.complete" ng-init="dish.complete=false">Submit</button>

              </div>
            </div>
          </form>
        </div>





      </div>
    </div>
</div><!-- morph-button -->




<div id="map">

</div>



<style>

    /*CHERYL'S STYLES*/
    .choices {
        border: 1px solid #333;
        background-color: #f0f0f0;
        margin: 5px 0;
    }
    .choices:hover {
        cursor: pointer;
    }

    .faded {
        font-weight: lighter;
        font-size: 0.7em;
    }




  button.accordion {
      background-color: #eee;
      color: #444;
      cursor: pointer;
      padding: 18px;
      width: 100%;
      border: none;
      text-align: left;
      outline: none;
      font-size: 15px;
      transition: 0.4s;
  }

  div.panel {
      display: none;
  }

  div.panel.show {
      display: block !important;
  }

/*CHERYL MADE THESE STYLES, FEEL FREE TO REMOVE*/

  .infoDiv h2 {
      font-weight: normal;
  }

  .infoDiv h2,
  .infoDiv p{
      margin: 3px;
  }

  span.right {
      display: inline-block;
      float: right;
  }

</style>


 <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDrhD4LOU25zT-2Vu8zSSuL8AnvMn2GEJ0&callback=initMap"
async defer></script>


<script>
  var acc = document.getElementsByClassName("accordion");
  var i;

  for (i = 0; i < acc.length; i++) {
      acc[i].addEventListener('click', function() {
          this.classList.toggle("active");
          this.nextElementSibling.classList.toggle("show");
      }, false);
  }

    var map;

    function initMap() {
        var mapDiv = document.getElementById('map');
        map = new google.maps.Map(mapDiv, {
            center: {lat: 45.5116861, lng: -73.5773356},
            zoom: 14,
            streetViewControl: false,
            mapTypeControl: false
        });

        mapHelper(map);

     }


    var mapHelper = function(map){
        var dishes = [];
        var markers = [];
        var currentUser = firebase.auth().currentUser;
        firebase.database().ref('dish/').once("value", function(snapshot){

            snapshot.forEach(function(child) {
                //console.log(child.val());
                dishes.push(child.val());
                if (child.val().active && child.val().ownerid !== currentUser.uid){
                    //console.log("new marker pushed!", child.val().dishName);
                    //console.log("lat", child.val().lat, "; lng:", child.val().lng);
                    console.log(child.val().time.startTime);
                    var date = new Date(child.val().time.startTime);
                    console.log(date);

                    var time = makeTime(date);
                    console.log(time);
                    var infoContent = "<div class='infoDiv'><h2>" +
                                      child.val().dishName + "<span class='right'>$" + child.val().price.toString() + "</span></h2><h2><span class='faded'> by " +
                                      child.val().owner +
                                      "</span></h2><p>" +
                                      child.val().description +
                                      "</p><p>pickup " +
                                      time +
                                      "</p></div>";

                    var infowindow = new google.maps.InfoWindow({
                        content: infoContent
                    });


                    var marker = new google.maps.Marker({
                        position: {
                            lat: child.val().lat,
                            lng: child.val().lng
                        },
                        title: child.val().dishName
                    });

                    marker.addListener('click', function() {
                        infowindow.open(map, marker);
                    });



                    markers.push(marker);
                    //console.log(marker);

                } //end if

            });

            markers.forEach(function(pin){
                pin.setMap(map);
            });
        });
    }; //end mapHelper function

    var makeTime = function(date) {
        var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jue", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

        var formatAPMP = function(date) {
            var hours = date.getHours();
            var minutes = date.getMinutes();
            var ampm = hours >= 12 ? 'pm' : 'am';
            hours = hours % 12;
            hours = hours ? hours : 12; // the hour '0' should be '12'
            minutes = minutes < 10 ? '0' + minutes : minutes;
            var strTime = hours + ':' + minutes + ampm;
            return strTime;
        };

        var formatDate = function(date){
            console.log("Got function to format date!");
            var todayDate = new Date();
            var testDate = new Date(date.toString());

            var timeString;
            if (testDate.setHours(0,0,0,0) == todayDate.setHours(0,0,0,0)){
                timeString = "today @ ";
            } else if(date.getFullYear() === todayDate.getFullYear()) {
                timeString = monthNames[date.getMonth()] + " " + date.getDate() + " @ ";
            } else {
                timeString = date.getFullYear() + ' ' + monthNames[date.getMonth()] + ' ' + date.getDate() + ' @ ';
            }
            console.log(timeString);
            return timeString;
        };

        return formatDate(date) + formatAPMP(date);

    };

</script>

<script src="/js/classie.js"></script>
<script src="/js/uiMorphingButton_fixed.js"></script>
<script>
  (function() {
    var docElem = window.document.documentElement, didScroll, scrollPosition;

    // trick to prevent scrolling when opening/closing button
    function noScrollFn() {
      window.scrollTo( scrollPosition ? scrollPosition.x : 0, scrollPosition ? scrollPosition.y : 0 );
    }

    function noScroll() {
      window.removeEventListener( 'scroll', scrollHandler );
      window.addEventListener( 'scroll', noScrollFn );
    }

    function scrollFn() {
      window.addEventListener( 'scroll', scrollHandler );
    }

    function canScroll() {
      window.removeEventListener( 'scroll', noScrollFn );
      scrollFn();
    }

    function scrollHandler() {
      if( !didScroll ) {
        didScroll = true;
        setTimeout( function() { scrollPage(); }, 60 );
      }
    };

    function scrollPage() {
      scrollPosition = { x : window.pageXOffset || docElem.scrollLeft, y : window.pageYOffset || docElem.scrollTop };
      didScroll = false;
    };

    scrollFn();

    [].slice.call( document.querySelectorAll( '.morph-button' ) ).forEach( function( bttn ) {
      new UIMorphingButton( bttn, {
        closeEl : '.icon-close',
        onBeforeOpen : function() {
          // don't allow to scroll
          noScroll();
        },
        onAfterOpen : function() {
          // can scroll again
          canScroll();
        },
        onBeforeClose : function() {
          // don't allow to scroll
          noScroll();
        },
        onAfterClose : function() {
          // can scroll again
          canScroll();
        }
      } );
    } );

    // for demo purposes only
    [].slice.call( document.querySelectorAll( 'form button' ) ).forEach( function( bttn ) {
      bttn.addEventListener( 'click', function( ev ) {
          //ev.preventDefault();
          console.log("default prevented?");

      } );
    } );
  })();
</script>
